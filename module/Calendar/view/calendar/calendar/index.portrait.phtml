<?php
$reservations = $this->get('reservations');
$events = $this->get('events');

$reservationsForColPlugin = $this->plugin('CalendarReservationsForCol');
$reservationsCleanupPlugin = $this->plugin('CalendarReservationsCleanup');

$eventsForColPlugin = $this->plugin('CalendarEventsForCol');
$eventsCleanupPlugin = $this->plugin('CalendarEventsCleanup');
?>

<!-- Modern Calendar Container -->
<div class="modern-calendar-wrapper">
    <!-- Desktop Table View -->
    <div class="modern-calendar-desktop">
        <div class="modern-calendar-table">
            <div class="modern-calendar-header">
                <div class="modern-calendar-time-header"></div>
                <?php foreach ($this->squares as $square): ?>
                    <div class="modern-calendar-court-header">
                        <?= $this->t($square->need('name')) ?>
                    </div>
                <?php endforeach; ?>
            </div>

            <div class="modern-calendar-body">
                <?php for ($walkingTime = $this->timeStart; $walkingTime < $this->timeEnd; $walkingTime += $this->timeBlock): ?>
                    <div class="modern-calendar-row">
                        <div class="modern-calendar-time-slot">
                            <?= $this->timeFormat($walkingTime, false, 'UTC') ?>
                        </div>

                        <?php foreach ($this->squares as $square): ?>
                            <div class="modern-calendar-cell">
                                <?php
                                $walkingDate = clone $this->dateStart;
                                $walkingDate->modify('+' . $walkingTime . ' sec');

                                $reservationsForCol = $reservationsForColPlugin($reservations, $walkingDate, $walkingTime, $this->timeBlock);
                                $eventsForCol = $eventsForColPlugin($events, $walkingDate, $walkingTime, $this->timeBlock);

                                $cellContent = $this->calendarCellLogic($walkingDate, $walkingTime, $this->timeBlock, $this->dateNow, $square, $this->user, $reservationsForCol, $eventsForCol);

                                // Determine status and apply modern styling - improved detection
                                $isFree = preg_match('/\bcc-free\b/', $cellContent);
                                $isBooked = preg_match('/\bcc-single\b/', $cellContent);
                                $isMultiple = preg_match('/\bcc-multiple\b/', $cellContent);
                                $isOwn = preg_match('/\bcc-own\b/', $cellContent);
                                $isConflict = preg_match('/\bcc-conflict\b/', $cellContent);
                                $isOver = preg_match('/\bcc-over\b/', $cellContent);
                                $isEvent = preg_match('/\bcc-event\b/', $cellContent);

                                // Extract billing status directly from booking data (like original project)
                                $billingStatus = null;
                                if ($this->user && $this->user->can('calendar.see-data')) {
                                    // Get reservations for this cell
                                    $reservationsForCell = $this->calendarReservationsForCell($reservationsForCol, $square);

                                    if (!empty($reservationsForCell)) {
                                        // Get the first reservation (like original project logic)
                                        $reservation = current($reservationsForCell);
                                        $booking = $reservation->needExtra('booking');

                                        if ($booking) {
                                            $billingStatus = $booking->getBillingStatus();
                                        }
                                    }
                                }

                                // Extract link if available
                                preg_match('/href="([^"]+)"/', $cellContent, $matches);
                                $link = isset($matches[1]) ? $matches[1] : null;

                                // Extract text content - improved extraction to match original project
                                $text = 'Free'; // Default text

                                // First try to extract from cc-label div (most common case)
                                if (preg_match('/<div[^>]*class="[^"]*cc-label[^"]*"[^>]*>([^<]+)<\/div>/', $cellContent, $matches)) {
                                    $text = trim($matches[1]);
                                }
                                // If no cc-label, try to extract from any div content
                                elseif (preg_match('/<div[^>]*>([^<]+)<\/div>/', $cellContent, $matches)) {
                                    $text = trim($matches[1]);
                                }
                                // If no div content, try to extract from link text
                                elseif (preg_match('/<a[^>]*>([^<]+)<\/a>/', $cellContent, $matches)) {
                                    $text = trim($matches[1]);
                                }
                                // Last fallback: strip HTML tags and get text
                                else {
                                    $text = trim(strip_tags($cellContent));
                                }

                                // Clean up the text
                                $text = $text ?: 'Free';

                                // Update text based on billing status if present - this should override the extracted text
                                if ($billingStatus) {
                                    switch ($billingStatus) {
                                        case 'pending':
                                            $text = 'Pending Payment';
                                            break;
                                        case 'paid':
                                            $text = 'Paid';
                                            break;
                                        case 'cancelled':
                                            $text = 'Cancelled';
                                            break;
                                        case 'uncollectable':
                                            $text = 'Uncollectable';
                                            break;
                                    }
                                }

                                // Determine status class - improved priority order to match original project logic
                                $statusClass = 'modern-status-unavailable';

                                // Priority order based on original project logic:
                                // 1. Own booking (highest priority)
                                // 2. Conflict (high priority)
                                // 3. Event (high priority)
                                // 4. Multiple bookings
                                // 5. Single booking
                                // 6. Past/Over (low priority)
                                // 7. Free (lowest priority)

                                if ($isOwn) {
                                    $statusClass = 'modern-status-own';
                                } elseif ($isConflict) {
                                    $statusClass = 'modern-status-conflict';
                                } elseif ($isEvent) {
                                    $statusClass = 'modern-status-event';
                                } elseif ($isMultiple) {
                                    $statusClass = 'modern-status-multiple';
                                } elseif ($isBooked) {
                                    $statusClass = 'modern-status-booked';
                                } elseif ($isOver) {
                                    $statusClass = 'modern-status-past';
                                } elseif ($isFree) {
                                    $statusClass = 'modern-status-free';
                                }

                                // Add billing status modifier if present
                                if ($billingStatus) {
                                    $statusClass .= ' modern-billing-' . $billingStatus;
                                }
                                ?>

                                <?php if ($link): ?>
                                    <a href="<?= $link ?>" class="modern-slot <?= $statusClass ?>">
                                        <?= $text ?>
                                    </a>
                                <?php else: ?>
                                    <div class="modern-slot <?= $statusClass ?>">
                                        <?= $text ?>
                                    </div>
                                <?php endif; ?>
                            </div>
                        <?php endforeach; ?>
                    </div>
                <?php endfor; ?>
            </div>
        </div>
    </div>

    <!-- Mobile Tab View -->
    <div class="modern-calendar-mobile">
        <!-- Tab Headers -->
        <div class="modern-tab-headers">
            <?php foreach ($this->squares as $index => $square): ?>
                <button onclick="switchTab(<?= $index ?>)"
                    data-tab="<?= $index ?>"
                    class="modern-tab-button <?= $index === 0 ? 'modern-tab-active' : '' ?>">
                    <?= $this->t($square->need('name')) ?>
                </button>
            <?php endforeach; ?>
        </div>

        <!-- Tab Content -->
        <div class="modern-tab-content">
            <?php foreach ($this->squares as $squareIndex => $square): ?>
                <div data-tab-content="<?= $squareIndex ?>"
                    class="modern-tab-panel <?= $squareIndex === 0 ? 'modern-tab-visible' : '' ?>">
                    <h3 class="modern-tab-title"><?= $this->t($square->need('name')) ?></h3>
                    <div class="modern-time-slots">
                        <?php for ($walkingTime = $this->timeStart; $walkingTime < $this->timeEnd; $walkingTime += $this->timeBlock): ?>
                            <div class="modern-time-slot-row">
                                <span class="modern-time-label">
                                    <?= $this->timeFormat($walkingTime, false, 'UTC') ?> - <?= $this->timeFormat($walkingTime + $this->timeBlock, true, 'UTC', true) ?>
                                </span>
                                <div class="modern-slot-container">
                                    <?php
                                    $walkingDate = clone $this->dateStart;
                                    $walkingDate->modify('+' . $walkingTime . ' sec');

                                    $reservationsForCol = $reservationsForColPlugin($reservations, $walkingDate, $walkingTime, $this->timeBlock);
                                    $eventsForCol = $eventsForColPlugin($events, $walkingDate, $walkingTime, $this->timeBlock);

                                    $cellContent = $this->calendarCellLogic($walkingDate, $walkingTime, $this->timeBlock, $this->dateNow, $square, $this->user, $reservationsForCol, $eventsForCol);

                                    // Determine status and apply modern styling - improved detection
                                    $isFree = preg_match('/\bcc-free\b/', $cellContent);
                                    $isBooked = preg_match('/\bcc-single\b/', $cellContent);
                                    $isMultiple = preg_match('/\bcc-multiple\b/', $cellContent);
                                    $isOwn = preg_match('/\bcc-own\b/', $cellContent);
                                    $isConflict = preg_match('/\bcc-conflict\b/', $cellContent);
                                    $isOver = preg_match('/\bcc-over\b/', $cellContent);
                                    $isEvent = preg_match('/\bcc-event\b/', $cellContent);

                                    // Extract billing status directly from booking data (like original project)
                                    $billingStatus = null;
                                    if ($this->user && $this->user->can('calendar.see-data')) {
                                        // Get reservations for this cell
                                        $reservationsForCell = $this->calendarReservationsForCell($reservationsForCol, $square);

                                        if (!empty($reservationsForCell)) {
                                            // Get the first reservation (like original project logic)
                                            $reservation = current($reservationsForCell);
                                            $booking = $reservation->needExtra('booking');

                                            if ($booking) {
                                                $billingStatus = $booking->getBillingStatus();
                                            }
                                        }
                                    }

                                    // Extract link if available
                                    preg_match('/href="([^"]+)"/', $cellContent, $matches);
                                    $link = isset($matches[1]) ? $matches[1] : null;

                                    // Extract text content - improved extraction to match original project
                                    $text = 'Free'; // Default text

                                    // First try to extract from cc-label div (most common case)
                                    if (preg_match('/<div[^>]*class="[^"]*cc-label[^"]*"[^>]*>([^<]+)<\/div>/', $cellContent, $matches)) {
                                        $text = trim($matches[1]);
                                    }
                                    // If no cc-label, try to extract from any div content
                                    elseif (preg_match('/<div[^>]*>([^<]+)<\/div>/', $cellContent, $matches)) {
                                        $text = trim($matches[1]);
                                    }
                                    // If no div content, try to extract from link text
                                    elseif (preg_match('/<a[^>]*>([^<]+)<\/a>/', $cellContent, $matches)) {
                                        $text = trim($matches[1]);
                                    }
                                    // Last fallback: strip HTML tags and get text
                                    else {
                                        $text = trim(strip_tags($cellContent));
                                    }

                                    // Clean up the text
                                    $text = $text ?: 'Free';

                                    // Update text based on billing status if present
                                    if ($billingStatus) {
                                        switch ($billingStatus) {
                                            case 'pending':
                                                $text = 'Pending Payment';
                                                break;
                                            case 'paid':
                                                $text = 'Paid';
                                                break;
                                            case 'cancelled':
                                                $text = 'Cancelled';
                                                break;
                                            case 'uncollectable':
                                                $text = 'Uncollectable';
                                                break;
                                        }
                                    }

                                    // Determine status class - improved priority order to match original project logic
                                    $statusClass = 'modern-status-unavailable';

                                    // Priority order based on original project logic:
                                    // 1. Own booking (highest priority)
                                    // 2. Conflict (high priority)
                                    // 3. Event (high priority)
                                    // 4. Multiple bookings
                                    // 5. Single booking
                                    // 6. Past/Over (low priority)
                                    // 7. Free (lowest priority)

                                    if ($isOwn) {
                                        $statusClass = 'modern-status-own';
                                    } elseif ($isConflict) {
                                        $statusClass = 'modern-status-conflict';
                                    } elseif ($isEvent) {
                                        $statusClass = 'modern-status-event';
                                    } elseif ($isMultiple) {
                                        $statusClass = 'modern-status-multiple';
                                    } elseif ($isBooked) {
                                        $statusClass = 'modern-status-booked';
                                    } elseif ($isOver) {
                                        $statusClass = 'modern-status-past';
                                    } elseif ($isFree) {
                                        $statusClass = 'modern-status-free';
                                    }

                                    // Add billing status modifier if present
                                    if ($billingStatus) {
                                        $statusClass .= ' modern-billing-' . $billingStatus;
                                    }
                                    ?>

                                    <?php if ($link): ?>
                                        <a href="<?= $link ?>" class="modern-slot <?= $statusClass ?>">
                                            <?= $text ?>
                                        </a>
                                    <?php else: ?>
                                        <div class="modern-slot <?= $statusClass ?>">
                                            <?= $text ?>
                                        </div>
                                    <?php endif; ?>
                                </div>
                            </div>
                        <?php endfor; ?>
                    </div>
                </div>
            <?php endforeach; ?>
        </div>
    </div>
</div>

<script>
    function switchTab(tabIndex) {
        // Get all tab buttons and content panels
        const tabButtons = document.querySelectorAll('[data-tab]');
        const tabPanels = document.querySelectorAll('[data-tab-content]');

        // Remove active class from all tabs
        tabButtons.forEach(button => {
            button.classList.remove('modern-tab-active');
        });

        // Hide all tab panels
        tabPanels.forEach(panel => {
            panel.classList.remove('modern-tab-visible');
        });

        // Activate selected tab
        const activeButton = document.querySelector(`[data-tab="${tabIndex}"]`);
        const activePanel = document.querySelector(`[data-tab-content="${tabIndex}"]`);

        if (activeButton && activePanel) {
            activeButton.classList.add('modern-tab-active');
            activePanel.classList.add('modern-tab-visible');
        }
    }

    // Ensure default tab is active on page load
    document.addEventListener('DOMContentLoaded', function() {
        // Activate the first tab by default
        switchTab(0);
    });

    // Also ensure default tab is active when page is fully loaded
    window.addEventListener('load', function() {
        // Double-check that the first tab is active
        const firstTab = document.querySelector('[data-tab="0"]');
        const firstPanel = document.querySelector('[data-tab-content="0"]');

        if (firstTab && firstPanel) {
            // Remove active class from all tabs
            document.querySelectorAll('[data-tab]').forEach(button => {
                button.classList.remove('modern-tab-active');
            });

            // Hide all tab panels
            document.querySelectorAll('[data-tab-content]').forEach(panel => {
                panel.classList.remove('modern-tab-visible');
            });

            // Activate first tab
            firstTab.classList.add('modern-tab-active');
            firstPanel.classList.add('modern-tab-visible');
        }
    });

    // Immediate execution to ensure default tab is active
    (function() {
        // Force the first tab to be active immediately
        const firstTab = document.querySelector('[data-tab="0"]');
        const firstPanel = document.querySelector('[data-tab-content="0"]');

        if (firstTab && firstPanel) {
            // Remove active class from all tabs
            document.querySelectorAll('[data-tab]').forEach(button => {
                button.classList.remove('modern-tab-active');
            });

            // Hide all tab panels
            document.querySelectorAll('[data-tab-content]').forEach(panel => {
                panel.classList.remove('modern-tab-visible');
            });

            // Activate first tab
            firstTab.classList.add('modern-tab-active');
            firstPanel.classList.add('modern-tab-visible');
        }
    })();

    // Additional immediate execution with setTimeout to ensure it runs after DOM is ready
    setTimeout(function() {
        const firstTab = document.querySelector('[data-tab="0"]');
        const firstPanel = document.querySelector('[data-tab-content="0"]');

        if (firstTab && firstPanel) {
            // Remove active class from all tabs
            document.querySelectorAll('[data-tab]').forEach(button => {
                button.classList.remove('modern-tab-active');
            });

            // Hide all tab panels
            document.querySelectorAll('[data-tab-content]').forEach(panel => {
                panel.classList.remove('modern-tab-visible');
            });

            // Activate first tab
            firstTab.classList.add('modern-tab-active');
            firstPanel.classList.add('modern-tab-visible');
        }
    }, 0);
</script>
<style>
    /* Reset and override all existing styles */
    .modern-calendar-wrapper * {
        box-sizing: border-box;
    }

    .modern-calendar-wrapper {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        background: #ffffff;
        border-radius: 16px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        border: 1px solid #e5e7eb;
        overflow: hidden;
        margin: 20px;
    }

    /* Desktop Styles */
    .modern-calendar-desktop {
        display: none;
    }

    @media (min-width: 1024px) {
        .modern-calendar-desktop {
            display: block;
        }
    }

    .modern-calendar-table {
        width: 100%;
    }

    .modern-calendar-header {
        display: grid;
        grid-template-columns: 120px repeat(6, 1fr);
        background: #f8fafc;
        border-bottom: 2px solid #e5e7eb;
    }

    .modern-calendar-time-header {
        padding: 16px;
        font-weight: 600;
        color: #374151;
        border-right: 1px solid #e5e7eb;
    }

    .modern-calendar-court-header {
        padding: 16px;
        text-align: center;
        font-weight: 700;
        font-size: 14px;
        color: #111827;
        border-left: 1px solid #e5e7eb;
    }

    .modern-calendar-body {
        display: contents;
    }

    .modern-calendar-row {
        display: grid;
        grid-template-columns: 120px repeat(6, 1fr);
        border-bottom: 1px solid #e5e7eb;
    }

    .modern-calendar-time-slot {
        padding: 16px;
        text-align: right;
        font-family: 'SF Mono', Monaco, monospace;
        font-size: 12px;
        color: #6b7280;
        font-weight: 500;
        background: #f8fafc;
        border-right: 1px solid #e5e7eb;
    }

    .modern-calendar-cell {
        padding: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-left: 1px solid #e5e7eb;
        min-height: 60px;
    }

    .modern-slot {
        width: 100%;
        padding: 12px 16px;
        text-align: center;
        border-radius: 8px;
        font-size: 13px;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.2s ease;
        cursor: pointer;
        border: none;
        display: block;
    }

    /* Status Colors - Enhanced */
    .modern-status-free {
        background: #dcfce7;
        color: #166534;
        border: 1px solid #bbf7d0;
    }

    .modern-status-free:hover {
        background: #bbf7d0;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(34, 197, 94, 0.2);
    }

    .modern-status-booked {
        background: #fee2e2;
        color: #991b1b;
        border: 1px solid #fecaca;
    }

    .modern-status-multiple {
        background: #dbeafe;
        color: #1e40af;
        border: 1px solid #bfdbfe;
    }

    .modern-status-own {
        background: #dcfce7;
        color: #166534;
        border: 2px solid #22c55e;
        box-shadow: 0 2px 4px rgba(34, 197, 94, 0.1);
    }

    .modern-status-conflict {
        background: #fef2f2;
        color: #dc2626;
        border: 1px solid #fecaca;
    }

    .modern-status-event {
        background: #fdf4ff;
        color: #7c3aed;
        border: 1px solid #e9d5ff;
    }

    .modern-status-past {
        background: #f3f4f6;
        color: #6b7280;
    }

    .modern-status-unavailable {
        background: #f3f4f6;
        color: #9ca3af;
    }

    /* Billing Status Indicators */
    .modern-billing-pending {
        border-left: 4px solid #ef4444 !important;
        position: relative;
    }

    .modern-billing-pending::after {
        content: "⏳";
        position: absolute;
        top: 2px;
        right: 4px;
        font-size: 10px;
        color: #ef4444;
    }

    .modern-billing-paid {
        border-left: 4px solid #10b981 !important;
        position: relative;
    }

    .modern-billing-paid::after {
        content: "✓";
        position: absolute;
        top: 2px;
        right: 4px;
        font-size: 10px;
        color: #10b981;
    }

    .modern-billing-cancelled {
        border-left: 4px solid #f59e0b !important;
        position: relative;
    }

    .modern-billing-cancelled::after {
        content: "✗";
        position: absolute;
        top: 2px;
        right: 4px;
        font-size: 10px;
        color: #f59e0b;
    }

    .modern-billing-uncollectable {
        border-left: 4px solid #6b7280 !important;
        position: relative;
    }

    .modern-billing-uncollectable::after {
        content: "⚠";
        position: absolute;
        top: 2px;
        right: 4px;
        font-size: 10px;
        color: #6b7280;
    }

    /* Mobile Styles */
    .modern-calendar-mobile {
        display: block;
    }

    @media (min-width: 1024px) {
        .modern-calendar-mobile {
            display: none;
        }
    }

    .modern-tab-headers {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 8px;
        padding: 16px;
        background: #f8fafc;
        border-bottom: 1px solid #e5e7eb;
    }

    .modern-tab-button {
        padding: 12px 16px;
        background: #ffffff;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        font-size: 13px;
        font-weight: 600;
        color: #374151;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .modern-tab-button:hover {
        background: #f0fdf4;
        color: #166534;
        border-color: #22c55e;
    }

    .modern-tab-active {
        background: #22c55e !important;
        color: #ffffff !important;
        border-color: #22c55e !important;
        box-shadow: 0 2px 8px rgba(34, 197, 94, 0.3);
    }

    .modern-tab-content {
        padding: 20px;
    }

    .modern-tab-panel {
        display: none !important;
    }

    .modern-tab-visible {
        display: block !important;
    }

    /* Ensure first tab is always visible by default */
    .modern-tab-panel[data-tab-content="0"] {
        display: block !important;
    }

    /* Force first tab button to be active by default */
    .modern-tab-button[data-tab="0"] {
        background: #22c55e !important;
        color: #ffffff !important;
        border-color: #22c55e !important;
        box-shadow: 0 2px 8px rgba(34, 197, 94, 0.3) !important;
    }

    .modern-tab-title {
        font-size: 20px;
        font-weight: 700;
        color: #111827;
        margin: 0 0 20px 0;
    }

    .modern-time-slots {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .modern-time-slot-row {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 16px;
        background: #f8fafc;
        border-radius: 12px;
        border: 1px solid #e5e7eb;
    }

    .modern-time-label {
        font-family: 'SF Mono', Monaco, monospace;
        font-size: 12px;
        color: #6b7280;
        font-weight: 500;
    }

    .modern-slot-container {
        width: 120px;
    }

    /* Override any existing calendar styles */
    .calendar-cell,
    .cc-label,
    .cc-free,
    .cc-single,
    .cc-multiple,
    .cc-own,
    .cc-conflict,
    .cc-over {
        all: unset !important;
    }
</style>