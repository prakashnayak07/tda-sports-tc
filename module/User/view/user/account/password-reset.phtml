<?php

$this->setup(array(
    'title' => 'Change password',
    'panel' => 'centered-panel',
    'messages' => array(
        'success' => $this->resetMessage,
    ),
    'back' => true,
    'links' => array(
        'Login' => $this->url('user/login'),
    ),
));

?>
<!DOCTYPE html>
<html lang="<?= $this->config('i18n.locale') ?>">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?= $this->option(['client.name.short', 'service.name.full']) ?> - Reset Password</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        brand: '#93b353',
                        'brand-dark': '#b0c817',
                    },
                    fontFamily: {
                        sans: ['Inter', 'system-ui', 'sans-serif'],
                    },
                }
            }
        }
    </script>
</head>

<body class="bg-gray-50 font-sans antialiased">
    <div class="min-h-screen flex items-center justify-center p-4">
        <div class="w-full max-w-md bg-white rounded-lg shadow-sm overflow-hidden">
            <!-- Header -->
            <div class="bg-brand p-6 text-white">
                <div class="flex justify-between items-center mb-4">
                    <a href="<?= $this->url('user/login') ?>" class="flex items-center gap-2 text-white/80 hover:text-white transition-colors">
                        <i class="ph ph-arrow-left"></i>
                        <span>Back to login</span>
                    </a>
                    <h1 class="text-2xl font-light"><?= $this->t('Reset Password') ?></h1>
                </div>
                <p class="text-white/90 text-sm"><?= sprintf($this->t('Set a new password for %s'), $this->option('service.name.full')) ?></p>
            </div>

            <!-- Content -->
            <div class="p-6 md:p-8">
                <!-- Introduction -->
                <div class="text-center mb-8">
                    <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <i class="ph ph-shield-check text-3xl text-green-600"></i>
                    </div>
                    <h2 class="text-xl font-semibold text-gray-900 mb-2"><?= $this->t('Set New Password') ?></h2>
                    <p class="text-gray-600"><?= $this->t('Now you can type a new password for your user account.') ?></p>
                </div>

                <!-- Success Message -->
                <?php if ($this->resetMessage): ?>
                    <div class="bg-green-50 border border-green-200 rounded-lg p-4 mb-6 flex items-start gap-3">
                        <i class="ph ph-check-circle text-green-500 mt-0.5"></i>
                        <div class="text-green-800 text-sm">
                            <?= $this->resetMessage ?>
                        </div>
                    </div>
                <?php endif; ?>

                <!-- Password Reset Form -->
                <?php
                $form = $this->resetForm;
                $form->setAttribute('method', 'post');
                $form->setAttribute('action', $this->url('user/password-reset', [], ['query' => ['id' => $this->resetUid, 'code' => $this->resetCode]]));
                $form->prepare();
                ?>
                <?= $this->form()->openTag($form) ?>

                <div class="space-y-6">
                    <!-- New Password Field -->
                    <div>
                        <label for="password1" class="block text-sm font-medium text-gray-700 mb-2"><?= $this->t('New Password') ?></label>
                        <div class="relative">
                            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-gray-400">
                                <i class="ph ph-lock"></i>
                            </div>
                            <?= $this->formElement(
                                $form->get('prf-pw1')
                                    ->setAttribute('id', 'password1')
                                    ->setAttribute('type', 'password')
                                    ->setAttribute('autocomplete', 'new-password')
                                    ->setAttribute('required', 'required')
                                    ->setAttribute('placeholder', 'Enter new password')
                                    ->setAttribute('class', 'w-full pl-10 pr-10 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-brand focus:border-brand outline-none transition')
                            ) ?>
                            <button type="button" class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600" data-target="password1">
                                <i class="ph ph-eye-slash password-toggle"></i>
                            </button>
                        </div>
                        <?php if ($form->get('prf-pw1')->getMessages()): ?>
                            <div class="mt-2 text-sm text-red-600 flex items-center gap-1">
                                <i class="ph ph-warning text-xs"></i>
                                <span><?= implode(', ', $form->get('prf-pw1')->getMessages()) ?></span>
                            </div>
                        <?php endif; ?>
                    </div>

                    <!-- Confirm Password Field -->
                    <div>
                        <label for="password2" class="block text-sm font-medium text-gray-700 mb-2"><?= $this->t('Confirm New Password') ?></label>
                        <div class="relative">
                            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-gray-400">
                                <i class="ph ph-lock"></i>
                            </div>
                            <?= $this->formElement(
                                $form->get('prf-pw2')
                                    ->setAttribute('id', 'password2')
                                    ->setAttribute('type', 'password')
                                    ->setAttribute('autocomplete', 'new-password')
                                    ->setAttribute('required', 'required')
                                    ->setAttribute('placeholder', 'Confirm new password')
                                    ->setAttribute('class', 'w-full pl-10 pr-10 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-brand focus:border-brand outline-none transition')
                            ) ?>
                            <button type="button" class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600" data-target="password2">
                                <i class="ph ph-eye-slash password-toggle"></i>
                            </button>
                        </div>
                        <?php if ($form->get('prf-pw2')->getMessages()): ?>
                            <div class="mt-2 text-sm text-red-600 flex items-center gap-1">
                                <i class="ph ph-warning text-xs"></i>
                                <span><?= implode(', ', $form->get('prf-pw2')->getMessages()) ?></span>
                            </div>
                        <?php endif; ?>
                    </div>

                    <!-- Password Requirements -->
                    <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <h4 class="text-sm font-medium text-blue-900 mb-2"><?= $this->t('Password Requirements:') ?></h4>
                        <ul class="text-sm text-blue-800 space-y-1">
                            <li class="flex items-center gap-2">
                                <i class="ph ph-check-circle text-blue-600"></i>
                                <?= $this->t('At least 6 characters long') ?>
                            </li>
                            <li class="flex items-center gap-2">
                                <i class="ph ph-check-circle text-blue-600"></i>
                                <?= $this->t('Use a mix of letters, numbers, and symbols') ?>
                            </li>
                            <li class="flex items-center gap-2">
                                <i class="ph ph-check-circle text-blue-600"></i>
                                <?= $this->t('Avoid common passwords') ?>
                            </li>
                        </ul>
                    </div>

                    <!-- Submit Button -->
                    <div>
                        <?= $this->formElement(
                            $form->get('prf-submit')
                                ->setAttribute('type', 'submit')
                                ->setAttribute('class', 'w-full bg-brand hover:bg-brand-dark text-white font-medium py-3 px-4 rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-brand')
                        ) ?>
                    </div>
                </div>

                <?= $this->form()->closeTag() ?>

                <!-- Security Tips -->
                <div class="mt-8 bg-gray-50 rounded-lg p-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-3"><?= $this->t('Security Tips') ?></h3>
                    <div class="space-y-3">
                        <div class="flex items-start gap-3">
                            <i class="ph ph-shield text-gray-400 mt-0.5"></i>
                            <div>
                                <p class="text-sm font-medium text-gray-900"><?= $this->t('Use a strong password') ?></p>
                                <p class="text-xs text-gray-500"><?= $this->t('Make it unique and hard to guess') ?></p>
                            </div>
                        </div>
                        <div class="flex items-start gap-3">
                            <i class="ph ph-key text-gray-400 mt-0.5"></i>
                            <div>
                                <p class="text-sm font-medium text-gray-900"><?= $this->t('Don\'t reuse passwords') ?></p>
                                <p class="text-xs text-gray-500"><?= $this->t('Use different passwords for different accounts') ?></p>
                            </div>
                        </div>
                        <div class="flex items-start gap-3">
                            <i class="ph ph-lock text-gray-400 mt-0.5"></i>
                            <div>
                                <p class="text-sm font-medium text-gray-900"><?= $this->t('Keep it secure') ?></p>
                                <p class="text-xs text-gray-500"><?= $this->t('Don\'t share your password with anyone') ?></p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Login Link -->
                <div class="mt-8 text-center">
                    <p class="text-gray-600 text-sm">
                        <?= $this->t('Remember your password?') ?>
                        <a href="<?= $this->url('user/login') ?>" class="text-brand hover:text-brand-dark font-medium transition-colors">
                            <?= $this->t('Sign in here') ?>
                        </a>
                    </p>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add subtle animations
            const elements = document.querySelectorAll('.bg-gray-50, .bg-white');
            elements.forEach((element, index) => {
                element.style.opacity = '0';
                element.style.transform = 'translateY(20px)';
                element.style.transition = 'opacity 0.6s ease, transform 0.6s ease';

                setTimeout(() => {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }, index * 100);
            });

            // Password toggle functionality
            const passwordToggles = document.querySelectorAll('.password-toggle');
            passwordToggles.forEach(toggle => {
                toggle.addEventListener('click', function() {
                    const targetName = this.getAttribute('data-target');
                    const passwordInput = document.querySelector(`[name="${targetName}"]`);
                    if (passwordInput) {
                        const isPassword = passwordInput.getAttribute('type') === 'password';
                        passwordInput.setAttribute('type', isPassword ? 'text' : 'password');
                        this.classList.toggle('ph-eye');
                        this.classList.toggle('ph-eye-slash');
                    }
                });
            });

            // Add hover effects to buttons
            const buttons = document.querySelectorAll('a[href], button[type="submit"]');
            buttons.forEach(button => {
                button.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-1px)';
                });

                button.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                });
            });

            // Form validation feedback
            const passwordInputs = document.querySelectorAll('input[type="password"]');
            passwordInputs.forEach(input => {
                input.addEventListener('blur', function() {
                    if (this.value && !this.checkValidity()) {
                        this.classList.add('border-red-500', 'ring-2', 'ring-red-500/20');
                        this.classList.remove('border-gray-300');
                    } else if (this.value) {
                        this.classList.remove('border-red-500', 'ring-2', 'ring-red-500/20');
                        this.classList.add('border-green-500', 'ring-2', 'ring-green-500/20');
                    }
                });

                input.addEventListener('input', function() {
                    if (this.classList.contains('border-red-500') || this.classList.contains('border-green-500')) {
                        if (this.checkValidity()) {
                            this.classList.remove('border-red-500', 'ring-2', 'ring-red-500/20');
                            this.classList.add('border-green-500', 'ring-2', 'ring-green-500/20');
                        } else {
                            this.classList.remove('border-green-500', 'ring-2', 'ring-green-500/20');
                            this.classList.add('border-red-500', 'ring-2', 'ring-red-500/20');
                        }
                    }
                });
            });

            // Password confirmation validation
            const password1 = document.getElementById('password1');
            const password2 = document.getElementById('password2');
            if (password1 && password2) {
                function validatePasswordMatch() {
                    if (password2.value && password1.value !== password2.value) {
                        password2.classList.add('border-red-500', 'ring-2', 'ring-red-500/20');
                        password2.classList.remove('border-gray-300', 'border-green-500', 'ring-green-500/20');
                    } else if (password2.value && password1.value === password2.value) {
                        password2.classList.remove('border-red-500', 'ring-2', 'ring-red-500/20');
                        password2.classList.add('border-green-500', 'ring-2', 'ring-green-500/20');
                    }
                }
                password1.addEventListener('input', validatePasswordMatch);
                password2.addEventListener('input', validatePasswordMatch);
            }

            // Form submission enhancement
            const form = document.querySelector('form');
            const submitButton = document.querySelector('button[type="submit"]');
            if (form && submitButton) {
                form.addEventListener('submit', function(e) {
                    submitButton.disabled = true;
                    submitButton.innerHTML = '<i class="ph ph-circle-notch animate-spin"></i> Updating Password...';

                    // Re-enable button after 5 seconds as fallback
                    setTimeout(() => {
                        if (submitButton.disabled) {
                            submitButton.disabled = false;
                            submitButton.innerHTML = 'Update Password';
                        }
                    }, 5000);
                });
            }
        });
    </script>
</body>

</html>